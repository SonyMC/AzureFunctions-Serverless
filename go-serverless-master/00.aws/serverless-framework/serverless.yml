# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: todo-serverless-framework
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: "1"

provider:
  name: aws
  runtime: nodejs12.x
  httpApi:
    payload: "2.0"
    cors: true
    authorizers:
      TodoJwtAuthorizer:
        identitySource: $request.header.Authorization
        issuerUrl: https://cognito-idp.us-east-1.amazonaws.com/us-east-1_GMdZm52Wh
        audience:
          - 7h6ivmhtdrfduhu4jjvfjqtduo
  environment:
    TODO_TABLE: todo-serverless-framework
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:*"
      # Resource: "*"
      Resource:
        Fn::GetAtt:
          - TodoServerlessFrameworkTable
          - Arn

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  hello:
    handler: handler.hello
    events:
      # - http:
      - httpApi:
          path: /hello
          method: get
  listTodos:
    handler: todo/listTodos.handler
    events:
      - httpApi:
          path: /todos
          method: get
          authorizer:
            name: TodoJwtAuthorizer
  getTodo:
    handler: todo/getTodo.handler
    events:
      - httpApi:
          path: /todos/{id}
          method: get
          authorizer:
            name: TodoJwtAuthorizer
  createTodo:
    handler: todo/createTodo.handler
    events:
      - httpApi:
          path: /todos
          method: post
          authorizer:
            name: TodoJwtAuthorizer
  deleteTodo:
    handler: todo/deleteTodo.handler
    events:
      - httpApi:
          path: /todos/{id}
          method: delete
          authorizer:
            name: TodoJwtAuthorizer
  updateTodo:
    handler: todo/updateTodo.handler
    events:
      - httpApi:
          path: /todos/{id}
          method: put
          authorizer:
            name: TodoJwtAuthorizer

# you can add CloudFormation resource templates here
resources:
  Resources:
    TodoServerlessFrameworkTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:provider.environment.TODO_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
